#+TYP_TODO: MAYBE TODO DONE

* write tests for process->script
The =process->script= procedure in =(gwl processes)= is important but complicated.  It needs tests.

* documentation
- document the cache
- add a procedure reference
-  Only the HTML files have highlighting, not the gzipped  HTML files!

* display errors
- missing-inputs-error should be a &gwl-error

* containerization
- mount the GWL cache directories for inputs and outputs (not the full cache)

* catch Ctrl-C and abort execution of all processes, not just the current one

* web interface needs C-c twice to terminate
This is a common problem with Guile web server applications.  For some reason installing a SIGINT signal handler (as the web server does) causes the first =C-c= to be swallowed.

* --output option has no effect!
This should serve as a prefix for all output files.  But how would this affect processes that use output files as inputs?

* add gettext support for all output

* add verbosity control
All the GWL output (such as “Executing” or “Skipping”) should respond to verbosity settings.

* add support for guile-ssh to submit jobs via SSH
or can we just use “guix deploy” directly?

* add support for external execution engines?  (DRMAA, AWS, Azure)
- write [[https://git.elephly.net/?p=software/guile-aws.git;a=summary][guile-aws library]]

* GWL cache

** [kyle] Make data caching git-annex aware
 When deciding to recompute data files, GWL avoids computing the hash
 of data files, using scripts as the cheaper proxy, as you described in
 87womnnjg0.fsf@elephly.net.  But if the user is tracking data files
 with git-annex, getting the hash of data files becomes less expensive
 because we can ask git-annex for the hash it has already computed.

** Get annex data files on demand if needed as inputs
i.e. fetch them with =git annex get=

** Make cache IPFS aware
This is similar to the git-annex work

* MAYBE change =run-time= field
it only accepts a “complexity” value, so remove that and assume that all arguments do in fact constitute a complexity.  It would turn this:

#+BEGIN_SRC wisp
process foo
  run-time
    complexity
      space 20 MiB
      time 10 seconds
#+END_SRC

…to this:

#+BEGIN_SRC wisp
process foo
  resources
    space 20 MiB
    time 10 seconds
#+END_SRC

Or rather: let the “resources” field accept an arbitrary list of resource values.

* grid engine: job names should be unique
Job names in the grid engine wrapper are not unique for all processes (because processes from the same process template may all have the same name) and also not unique for all workflows submitted by the user.

Instead of using user-provided job names we should be using the unique job-script name.

* “workflow” macro breaks when no name is provided
When a name is not provided but other fields are then the first field is assumed to be the name … and this goes horribly wrong as =symbol->string= fails.

* remapping inputs doesn’t work
=report2= has an input =logo: LOGO=, which is an absolute file name.  On the command line I override it like this:

#+begin_example
../pre-inst-env /home/rekado/.config/guix/current/bin/guix workflow run pigx-rnaseq.w --input=/home/rekado/dev/gx/gwl/pigx-rnaseq/Logo_PiGx.png=/home/rekado/dev/pigx/pigx_rnaseq/images/Logo_PiGx.png
#+end_example

But this doesn’t cause =/home/rekado/dev/gx/gwl/pigx-rnaseq/Logo_PiGx.png= to become available during the run of the workflow.  It will still look up that location at runtime and fail.  It should instead look for the new location.

* pigx-rnaseq: use relative names
For pigx-rnaseq some directories seem to only be usable when they are absolute file names (like the work directory).
