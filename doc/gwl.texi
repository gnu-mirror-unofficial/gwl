\input texinfo
@c -*-texinfo-*-

@c %**start of header
@setfilename gwl.info
@documentencoding UTF-8
@settitle Guix Workflow Language Reference Manual
@c %**end of header

@include version.texi

@copying
Copyright @copyright{} 2018 Roel Janssen@*
Copyright @copyright{} 2018 Ricardo Wurmus

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
copy of the license is included in the section entitled ``GNU Free
Documentation License''.
@end copying

@dircategory Scientific Computing
@direntry
* Guix Workflow Language: (gwl).  Reproducible Scientific Workflows based on Guix.
@end direntry

@titlepage
@title Guix Workflow Language Reference Manual
@subtitle Reproducible Scientific Workflows based on Guix
@author The developers of the GNU Guix Workflow Language

@page
@vskip 0pt plus 1filll
Edition @value{EDITION} @*
@value{UPDATED} @*

@insertcopying
@end titlepage

@contents

@c *********************************************************************
@node Top
@top Guix Workflow Language

This document describes the Guix Workflow Language version @value{VERSION}.

@menu
* Introduction::                What is this all about?
* Installation::                Installing the GWL.
* A Simple Workflow::           Show me what this looks like!
* Process Engines::             Generating executable pipeline scripts.

* Acknowledgments::             Thanks!
* GNU Free Documentation License::  The license of this manual.
* Concept Index::               Concepts.
* Programming Index::           Data types, functions, and variables.
@end menu

@c *********************************************************************
@node Introduction
@chapter Introduction

This package provides the @dfn{Guix Workflow Language} (GWL), a
scientific computing extension to the Guix package manager.  It combines
the specification of work units and their relationship to one another
with the reproducible software deployment facilities of the functional
package manager GNU Guix.

In the GWL there are two concepts we need to know about: processes and
workflows.  We describe a computation (running a program, or evaluating
a Scheme expression) using a process.  A workflow describes how multiple
processes relate to each other (e.g. ``process B must run after process
A, and process C must run before process A'').

To make processes and workflows available to the GWL via Scheme or the
command line, we write them as @ref{Creating Guile Modules,,,guile,
Guile Scheme modules}.  Processes or workflows can be run
programmatically using the @code{process->script->run} and
@code{workflow-run} procedures, or on the command line by using the
@code{guix process} and @code{guix workflow} commands.


@c *********************************************************************
@node Installation
@chapter Installation

The Guix Workflow Language uses the GNU build system.  To install it
from a release tarball just unpack it and run the usual commands:

@cindex installing from source
@cindex building from source
@example
./configure
make
make install
@end example

If you want to build the sources from the source repository you need to
bootstrap the build system first.  Run @code{autoreconf -vif} first and
then perform the above steps.


@c *********************************************************************
@node A Simple Workflow
@chapter A Simple Workflow

To get a little taste of what the workflow language looks like, let's
start by writing a simple workflow.  The workflow language is a
@dfn{domain specific language} (DSL) embedded in Guile Scheme.  If you
prefer a white-space sensitive syntax like that of Python or YAML over
the native syntax of Scheme, you can use the Wisp syntax extension,
which will be introduced later.

Here is a simple workflow example:

@example
@include examples/simple.scm
@end example


@c *********************************************************************
@node Process Engines
@chapter Process Engines

@cindex executing processes
@cindex simple-engine, Process Engine
Once you have defined a workflow, there are different ways to run the
processes it consists of.  The simplest way is to turn the workflow into
a Guile script that sets up the desired environment and then executes
the workflow processes on the current machine.  This is what the
@code{simple-engine} does.

@cindex grid-engine, Process Engine
The @code{grid-engine} is similar to the @code{simple-engine} in that it
generates a shell script, with the difference that it also includes
resource variable definitions for submission to a Grid Engine scheduling
system.  The resource variables are derived from the process complexity
field.

@c *********************************************************************
@node Acknowledgments
@chapter Acknowledgments

Thanks to the following people who contributed to the Guix Workflow
Language through bug reports or patches:

@itemize @bullet
@item Ludovic Court√®s @email{ludo@@gnu.org}
@end itemize

Also thanks to the people who reviewed this project for joining the GNU
project.

@itemize @bullet
@item Mike Gerwitz @email{mtg@@gnu.org}
@end itemize

Thank you.

@c *********************************************************************
@node GNU Free Documentation License
@appendix GNU Free Documentation License

@include fdl-1.3.texi

@page

@c *********************************************************************
@node Concept Index
@unnumbered Concept Index

@printindex cp

@node Programming Index
@unnumbered Programming Index
@syncodeindex tp fn
@syncodeindex vr fn
@printindex fn

@bye
