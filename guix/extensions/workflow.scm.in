;;; Copyright Â© 2021, 2022 Ricardo Wurmus <rekado@elephly.net>
;;;
;;; This program is free software; you can redistribute it and/or modify it
;;; under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 3 of the License, or (at
;;; your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful, but
;;; WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(define-module (guix extensions workflow)
  #:use-module (guix scripts)
  #:use-module (ice-9 match)
  #:export (guix-workflow))

;; IMPORTANT: We must avoid loading any modules from the GWL here,
;; because we need to adjust the guile load paths first.  It's okay to
;; import modules from core Guile and (guix scripts) though.

(define (replace-load-paths!)
  (let ((own-load-path
         (if (getenv "GWL_UNINSTALLED")
             (list "@abs_top_srcdir@"
                   "@abs_top_builddir@")
             (list "@guilemoduledir@")))
        (own-load-compiled-path
         (if (getenv "GWL_UNINSTALLED")
             (list "@abs_top_srcdir@"
                   "@abs_top_builddir@")
             (list "@guileobjectdir@"))))
    ;; Override load paths
    (set! %load-path
          (append own-load-path
                  ;; This is Guile's own pristine load path.
                  (list (%library-dir) (%site-dir)
                        (%global-site-dir) (%package-data-dir))
                  ;; When building in an impure environment this
                  ;; variable may contain locations that collide with
                  ;; Guile's own load path, so we put it at the very
                  ;; end.  We add it for all the additional Guile
                  ;; packages.
                  (parse-path "@GUILE_LOAD_PATH@")))
    (set! %load-compiled-path
          (append own-load-compiled-path
                  ;; This is Guile's own pristine load path for
                  ;; compiled modules.
                  (let ((ccache (%site-ccache-dir)))
                    (list (string-append
                           (string-drop-right ccache
                                              (string-length "site-ccache"))
                           "ccache")
                          ccache))
                  ;; When building in an impure environment this
                  ;; variable may contain locations that collide with
                  ;; Guile's own load path, so we put it at the very
                  ;; end.  We add it for all the additional Guile
                  ;; packages.
                  (parse-path "@GUILE_LOAD_COMPILED_PATH@")))))

;;;
;;; Entry point.
;;;

(define-command (guix-workflow . args)
  (category main) ; TODO: use something else
  (synopsis "execute or visualize workflows")

  (replace-load-paths!)
  (match (command-line)
    ((guix workflow . args)
     (setenv "GUILE_LOAD_PATH"
             (string-join %load-path ":"))
     (setenv "GUILE_LOAD_COMPILED_PATH"
             (string-join %load-compiled-path ":"))
     (setenv "_GWL_INVOKING_GUIX"
             (dirname (dirname guix)))
     (apply system* "@GUILE@" "-q"
            "-c" "(apply (@ (gwl main) guix-workflow-main) (command-line))"
            "--" args))))
